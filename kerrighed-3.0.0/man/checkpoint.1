'\" t
.\"     Title: checkpoint
.\"    Author: [see the "Authors" section]
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 06/07/2010
.\"    Manual: [FIXME: manual]
.\"    Source: [FIXME: source]
.\"  Language: English
.\"
.TH "CHECKPOINT" "1" "06/07/2010" "[FIXME: source]" "[FIXME: manual]"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
checkpoint \- Checkpoint an application\&.
.SH "SYNOPSIS"
.HP \w'\fBcheckpoint\fR\ 'u
\fBcheckpoint\fR [\fIOPTIONS\fR] \fIpid\fR
.SH "DESCRIPTION"
.PP

\fBcheckpoint\fR
checkpoints a running application identified by one of its processes given by
\fIpid\fR\&.
.PP
Checkpoint/Restart basically consists of storing a snapshot of the current application state\&. Later on, application can be restarted from this snapshot\&. It can be useful for fault tolerance, scheduling, hardware maintenance and debugging\&.
.PP
Checkpointing an application consists in three steps: freezing the application, saving the application state on disk, unfreezing the application\&. By default, all three steps are run in sequence\&.
.PP
To allow an application to be checkpointed, one must set the CHECKPOINTABLE capability\&. See
\fBkrgcr\-run\fR(1),
\fBkrgcapset\fR(1)) and
\fBkerrighed_capabilities\fR(7) for further details\&.
.PP
In general case, an application consists of a tree of processes or threads\&. The root process of the application must have the CHECKPOINTABLE capability effective and inheritable before creating other processes or threads (See
\fBfork\fR(2),
\fBclone\fR(2), and
\fBpthread_create\fR(3))\&.
.PP
If the root application process exits later, all its children processes are still considered as processes of the same application\&.
.SH "OPTIONS"
.PP
.PP
\fB\-h\fR, \fB\-\-help\fR
.RS 4
Print help and exit\&.
.RE
.PP
\fB\-v\fR, \fB\-\-version\fR
.RS 4
Print version informations and exit\&.
.RE
.PP
\fB\-a\fR, \fB\-\-from\-appid\fR
.RS 4
Use
\fIpid\fR
as an application identifier, not as a standard process identifier\&.
.RE
.PP
\fB\-f\fR, \fB\-\-freeze\fR
.RS 4
Freeze an application without checkpointing it\&. It is useful if you have to save some objects (such as files) before running the checkpoint without racing with the application\&.
.RE
.PP
\fB\-u\fR [\fIsignal\fR], \fB\-\-unfreeze\fR=[\fIsignal\fR]
.RS 4
Unfreeze an application previously frozen without checkpointing it\&. Optionally, it sends a signal
\fIsignal\fR
to all processes of the application just before unfreezing it\&. The signal will be handled by each process as soon as the process is woken up\&. By default, no signal is sent\&.
\fIsignal\fR
must be given as a numerical value\&. The list of signal numbers can be retrieved with
\fBkill \-L\fR\&.
.RE
.PP
\fB\-c\fR, \fB\-\-ckpt\-only\fR
.RS 4
Checkpoint an already frozen application\&.
.RE
.PP
\fB\-k\fR [\fIsignal\fR], \fB\-\-kill\fR=[\fIsignal\fR]
.RS 4
Send a signal
\fIsignal\fR
to all processes of the application after checkpointing the running application and before unfreezing the application\&. The signal will be handled by each process as soon as the process is woken up\&. By default, it sends the SIGTERM signal\&.
\fIsignal\fR
must be given as a numerical value\&. The list of signal numbers can be retrieved with
\fBkill \-L\fR\&.
.RE
.PP
\fB\-i\fR, \fB\-\-ignore\-unsupported\-files\fR
.RS 4
Allow to checkpoint an application even if the application is using some files, which type is not supported by checkpoint/restart mechanisms (such as socket)\&. At restart time, file descriptor appear to be closed\&. Without this option, if there is some unsupported files,
\fBcheckpoint\fR
fails with \*(AqFunction not implemented\*(Aq\&.
.RE
.PP
\fB\-d \fR\fB\fIdescription\fR\fR, \fB\-\-description=\fR\fB\fIdescription\fR\fR
.RS 4
Associate a description
\fIdescription\fR
with the checkpoint\&. The description is recorded in
description\&.txt
in the checkpoint folder (see FILES below)\&.
.RE
.PP
Options
\fB\-\-freeze\fR,
\fB\-\-ckpt\-only\fR,
\fB\-\-unfreeze\fR,
\fB\-\-kill\fR
are mutually exclusive\&.
.PP
Options
\fB\-\-description\fR
and
\fB\-\-ignore\-unsupported\-files\fR
make sense only when really checkpointing the application\&.
.SH "SUPPORTED APPLICATIONS AND LIMITATIONS"
.PP
Multi\-process applications and multithreaded programs are supported\&. To be able to restart the application, all process identifiers (including process group and session identifier) used by the application must be unused\&. Option
\fB\-\-pid\fR
of
\fBrestart\fR(1) may be useful if process group leader or session leader has not been checkpointed\&.
.PP
Checkpointing applications with zombie processes is not supported\&.
.PP
Checkpointing of applications using socket(s) or named pipe(s) (fifo) is not supported (unless using
\fB\-\-ignore\-unsupported\-files\fR)\&. Therefore, graphic applications are not supported since there are using sockets to communicate with the X server\&.
.PP
Checkpointing of application using anonymous pipe(s) may work depending on where the processes are running\&. Else, it fails at checkpoint time with \*(AqFunction not implemented\*(Aq\&.
.PP
System V IPC objects are not restored but it is possible to checkpoint an application that is currently waiting on such IPC objects\&. For instance, you can checkpoint a process waiting to receive a message from a message queue\&. The process will replay the action after the restart if the IPC objects still exits\&. State of System V IPC objects can be saved and restored using respectfully
\fBipccheckpoint\fR(1) and
\fBipcrestart\fR(1)\&. For consistency, application should be frozen before saving state of System V IPC objects\&.
.PP
Similarly to System V IPC objects, POSIX shared memory segment (SHM) are not checkpointed with the application\&. However, similarly to System V shared memory segments, POSIX shared memory segments can be saved independently\&. Process(es) will be reattached at restart time if the shared memory segments still exist or if they have been restored\&. In Linux, state of POSIX shared memory segment can be saved/restored by copying (using
\fBcp\fR(1)) from/to
/dev/shm/\fI<shm_name>\fR\&. For consistency, application should be frozen before saving state of POSIX shared memory segment (SHM)\&.
.PP
Files are not checkpointed nor restored\&. The files are reopened at restart time and file pointers are restored\&. That means that files must be in consistent states at restart time\&. Else, you can expect a strange behavior from your application\&. You can take advantage of the
\fB\-\-freeze\fR
option before the checkpoint to manually backup the files\&.
.PP
To restart your application, you must run exactly the same kernel as before the checkpoint\&. Thus, you can not expect to checkpoint an application before upgrading your kernel and restart once the upgrade is done\&.
.SH "EXAMPLE"
.PP
The following example shows how to start an application, checkpoint it and restart it\&.
.SS "Start the application"
.PP
$ krgcr\-run \&./mycomputeprogram 12 1024 58
.SS "Checkpoint the application"
.PP
.PP
Freeze the application:
.RS 4
$ checkpoint \-\-freeze `pgrep mycomputeprogram`
.RE
.PP
Save related System V IPC objects:
.RS 4
$ ipccheckpoint \-s 2 ~/chkpt/ipcsem\&.bin
.RE
.PP
Save related POSIX shared memory segments:
.RS 4
$ cp /dev/shm/shm_computeprogram12 ~/chkpt/shm_computeprogram12\&.bin
.RE
.PP
Save related files:
.RS 4
$ cp \&./compute12_result\&.log ~/chkpt/compute12_result\&.log
.RE
.PP
Dump state of application processes:
.RS 4
$ checkpoint \-\-ckpt\-only `pgrep mycomputeprogram`
.RE
.PP
Unfreeze the application:
.RS 4
$ checkpoint \-\-unfreeze `pgrep mycomputeprogram`
.RE
.SS "Restart the application"
.PP
Later, you may want to restart your application from the last checkpoint\&.
.PP
.PP
Restore related System V IPC objects:
.RS 4
$ ipcrestart \-s ~/chkpt/ipcsem\&.bin
.RE
.PP
Restore related POSIX shared memory segments:
.RS 4
$ cp ~/chkpt/shm_computeprogram12\&.bin /dev/shm/shm_computeprogram12
.RE
.PP
Restore related files:
.RS 4
$ cp ~/chkpt/compute12_result\&.log \&./compute12_result\&.log
.RE
.PP
Finally, restart the program using its \fIappid\fR (1632 in this example):
.RS 4
$ restart \-\-foreground 1632 1
.RE
.SH "FILES"
.PP
.PP
/var/chkpt
.RS 4
This directory is default location for disk checkpoints\&.
.RE
.PP
/var/chkpt/<appid>/v<version>/
.RS 4
This directory contains the
\fIn\fRth checkpoint (with
\fIn\fR
equals to
\fIversion\fR) of application identified by
\fIappid\fR\&.
.sp
To remove a checkpoint from disk, remove this folder\&.
.RE
.SH "AUTHORS"
.PP
Matthieu Fertr√©
matthieu\&.fertre@kerlabs\&.com, Renaud Lottiaux
renaud\&.lottiaux@kerlabs\&.com
.SH "SEE ALSO"
.PP

\m[blue]\fB\fBrestart\fR(1)\fR\m[],
\m[blue]\fB\fBipccheckpoint\fR(1)\fR\m[],
\m[blue]\fB\fBipcrestart\fR(1)\fR\m[],
\m[blue]\fB\fBkrgcr\-run\fR(1)\fR\m[],
\m[blue]\fB\fBkrgcapset\fR(1)\fR\m[],
\m[blue]\fB\fBkerrighed_capabilities\fR(7)\fR\m[],
