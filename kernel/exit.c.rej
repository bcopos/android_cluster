--- kernel/exit.c
+++ kernel/exit.c
@@ -898,10 +1024,17 @@
 static void forget_original_parent(struct task_struct *father)
 {
 	struct task_struct *p, *n, *reaper;
+#ifdef CONFIG_KRG_EPM
+	struct children_kddm_object *children_obj = NULL;
+#endif
 	LIST_HEAD(dead_children);
 
 	exit_ptrace(father);
 
+#ifdef CONFIG_KRG_EPM
+	if (rcu_dereference(father->children_obj))
+		children_obj = __krg_children_writelock(father);
+#endif
 	write_lock_irq(&tasklist_lock);
 	reaper = find_new_reaper(father);
 
@@ -911,9 +1044,22 @@
 			BUG_ON(p->ptrace);
 			p->parent = p->real_parent;
 		}
+#ifdef CONFIG_KRG_EPM
+		else {
+			BUG_ON(!p->ptrace);
+			krg_ptrace_reparent_ptraced(father, p);
+		}
+#endif
 		reparent_thread(father, p, &dead_children);
 	}
 	write_unlock_irq(&tasklist_lock);
+#ifdef CONFIG_KRG_EPM
+	if (children_obj) {
+		/* Reparent remote children */
+		krg_forget_original_remote_parent(father, reaper);
+		krg_children_exit(father);
+	}
+#endif
 
 	BUG_ON(!list_empty(&father->children));
 
@@ -970,10 +1125,20 @@
 	 * we have changed execution domain as these two values started
 	 * the same after a fork.
 	 */
+#ifdef CONFIG_KRG_EPM
+	/* remote parent aware version of vanilla linux check (below) */
+	real_parent_self_exec_id = krg_get_real_parent_self_exec_id(tsk,
+								    krg_cookie);
+	if (tsk->exit_signal != SIGCHLD && !task_detached(tsk) &&
+	    (tsk->parent_exec_id != real_parent_self_exec_id ||
+	     tsk->self_exec_id != tsk->parent_exec_id))
+		tsk->exit_signal = SIGCHLD;
+#else
 	if (tsk->exit_signal != SIGCHLD && !task_detached(tsk) &&
 	    (tsk->parent_exec_id != tsk->real_parent->self_exec_id ||
 	     tsk->self_exec_id != tsk->parent_exec_id))
 		tsk->exit_signal = SIGCHLD;
+#endif
 
 	signal = tracehook_notify_death(tsk, &cookie, group_dead);
 	if (signal >= 0)
